hello everybody in this video we're going to create a very simple banking program using Java this video is meant to be a beginner's project to help us understand how methods work so if that sounds good to you let's get started as a beginner it might be helpful to you to break up your project into separate steps then tackle this project one step at a time I'll add a few comments of the different steps our program is going to take so first we're going to declare our variables I misspelled that then we will display a menu a user is going to pick a choice from this menu depending on what they want to do they can make a deposit show their balance make a withdrawal so on and so forth we will get and process users Choice we'll create a method of show balance in order to display the balance to the user let me zoom in another method to make a deposit then a method to withdraw withdraw funds we'll just say withdraw and then we will create an exit message at the end once the user exits so again as a beginner it might be helpful to you to break up your program into different steps we'll start with our step of declare variables here's the different variables we'll need we have an account our account has a balance such as dollars and cents so a double would make sense for the balance because it includes a decimal portion sense so we have our balance we'll need a scanner because we're accepting user input scanner scanner equals new scanner type system.in import this class import java.util.scanner and then we are going to close our scanner when we're done with it let's take care of that now because I'm probably going to forget we have our scanner our balance we're going to continue this program as long as a user doesn't exit we'll need a while loop we will declare and assign a Boolean variable of is running set that to be true continue this program while is running is true then we will accept a choice from the user this will be an a user is going to pick one to show balance two to deposit three to withdraw or four to exit the user is going to fill this in later using the scanner all right we have declared our variables now we'll display a menu to the user I will print the following let's say banking program now you don't need to do this but I like to add some separators using a bunch of asterisks I just think it makes it look cool we will lay out the different options we will have option one option one will be to show balance option two will be to deposit option three will be to withdraw four will be to exit and then I'll add another separator again not necessary I think it would just look more organized now we need to get and process the user's choice we have a variable of choice we'll need to create a prompt we will say enter your choice then hint one through 4 I'll use print instead of print line because I like the user input on the same line as the prompt we will assign our variable of choice equal to use the scanner called the next int method ideally a user is going to type in a number 1 through 4 to do one of the following now we'll process the user's choice I think an enhanced switch would be great for this we will create a switch and examine our variable of choice we're examining our choice against matching cases if Choice equals a case of one we'll write an arrow to do something we'll do this we're going to call a method to show our balance because one means the user wants to show their balance we'll fill that in later let's write a test message I'll use system.out.print LINE let's say show balance case 2 will be for deposit we'll just print a test message of deposit again we're going to fill this method in later and call it case three is for withdraw case three withdraw case four is to exit that we can actually fill in right away it's pretty simple we'll take our Boolean variable of is running and set it to be false then we'll add a default case in case somebody doesn't type in a number 1 through four we'll output invalid Choice Let's test numbers 1 through three first enter a choice I'll pick one that's for show balance again we'll be calling a method later to show our balance two is for deposit we're depositing three is for withdraw four is to exit but it doesn't do anything currently then any other choice such as five prints out invalid choice we want this program to continue running as long as is running remains true so let's enclose our code within a loop a while loop while is running you don't necessarily need to say equals true if it's a Boolean you can just say the Boolean variable's name while is running is true then do all this code so I'm going to cut our code currently and paste it within the wild Loop now we can test is running one is to show balance we show our balance two is to deposit we deposit three is to withdraw withdraw four is to exit and we should exit process finished with ex Code Zero we know that that works now our next step is to show balance and this is going to be a method outside of our main method we're we're going to create a new method of show balance this has to be a static method because our main method is also static there will be no return type the return type is void the method name will be show balance there's going to be one parameter a double of balance when we called this method we have to pass in our balance variable within this method we're going to use a print F statement and I'll zoom in a little within this print F statement pick a unit of currency you would like to use for this banking program I'll use American dollars we need a placeholder we'll use a percent sign and then F to display a double f means floating Point number we will display our balance and from the beginning I'm actually going to set my balance equal to Z we're going to be testing it then let me zoom out for case one we're going to call the show balance method but we have to pass in our balance variable all right let's test it enter a choice I'll pick one to show our balance uh here's what we got currently 0 and a bunch of zeros after the decimal we are forgetting that new line character too so let's add a new line character to the end before I forget if you would like to display two digits after the decimal for example normally when you display a floating Point number using print F you display six digits after the decimal to limit it to two we can add the following after our placeholder our percent sign we're going to add 0 2 and to your choice I will type in one to show our balance our balance is $0 and0 we're displaying two digits after the decimal let's change our initial balance to be $110.99 enter your choice I will type in one our balance is $10.99 I think I'm also going to add a separator before displaying the balance too to help with readability although it's not necessary so I'm going to cut one of these lines where we display a bunch of asterisks and print it right before displaying the balance let's show our balance and here's our balance $10.99 and we have some of those separators before and after which I think looks nice our show balance method is complete I'm going to collapse this method we don't need to code within it anymore our next method is to make a deposit we'll create a method of deposit oh and then be sure to set your balance back to zero we will create a static method the return type is going to be double we will declare this method as the deposit method there will be no parameters but we will be returning something a double inside of this method I will create a local variable the data type is double the name will be amount a user is going to type in an amount the amount that they're depositing using this method this method isn't going to work properly until we return something add return statement just temporarily so everything runs fine I'm just going to return zero we'll take care of this later I just want everything to run in compile fine we will prompt a user to type in an amount I will use print instead of print line that's my own preference for prompts enter an amount to be deposited now here's one issue we're accepting user input from a user amount equals if I attempt to use our scanner scanner. next Double there's an issue our method isn't aware what the scanner is because we declared the scanner within a separate method our main method methods can't see inside of each other there's a few different options one we could create a local scanner within this method you know scanner scanner equals new scanner and all that I don't like the idea of creating several different scanners within this project because then we're leaving them all open to accept user input so why don't we do this let's take our scanner move it from this local scope and put it within a class scope so let's cut our Scanner with this the main method and stick it within the main class but it does need to be static because some static methods are using it this one scanner is accessible throughout the whole program now and that warning goes away so I think this would be better than creating several different scanners and leaving them all open throughout this program we're just going to reuse the same one at this point we're going to verify the amount that the user types in I'll use an if statement first if a user types in an amount that's negative well they can't make a deposit they can't deposit negative money that's stupid so we will check if our amount variable that the user types in is less than zero if that's the case we will print the following amount can't be negative and then we will return zero if the user does type in an amount that's valid we'll execute an lse statement where we're going to return let's cut our return statement at the end we'll return our amount now when we call our method we can delete this print line statement if a user selects two to make a deposit we're going to assign our balance variable balance equals our balance plus call the deposit method our deposit method is going to return a number an amount if it's valid we're going to return it back to the place in which we call it we will add this to our current balance and reassign it to balance our balance will equal our current balance plus the deposit that we make we can shorten this too we could just say balance plus equals deposit okay let's do a test run banking program let's show our balance our balance is currently zero we'll select two to make a deposit two enter an amount to be deposited let's try and break it first let's say1 million amount can't be negative then we're brought back to the menu let's try and make a deposit again enter an amount to be deposited let's say say $150 and a nickel 5 Cent that seems to have worked let's show our balance again and here's our New Balance $150 and5 all right the deposit method is done we can collapse it we no longer need to code within it and now we need a withdraw method we will declare a new method it's a static method we'll be returning a double the name of this method will be withdraw there will be one parameter we will pass in a balance double balance we do need to return something so temporarily just so our program runs correctly I'm just going to return zero we'll change that later within this method I'm going to create a local variable of amount double amount we will prompt a user enter amount to be withdrawn we will assign our amount equal to we're going to use our scanner and remember it's within the class scope so we have access to it within this method scanner. next Double to accept a double if somebody tries to withdraw money that they don't have we can check that within an if statement if the amount is greater than our balance we're passing in our balance so we know what it is if somebody tries to withdraw a million dollars but they have no money in their bank account well they can't do that we will print insufficient funds what if they try and withdraw negative money we can check that within an else if statement else if our amount that the user types in is less than zero will output amount can't be negative else if everything checks out we return the amount I will cut our current return statement we will return the amount that the user types in return amount So within our if statement return zero within our else if statement return zero when we reach the end we do need to return something even if it is zero and I'm going to use print instead of print line so let's go back to our switch right here we're going to be returning a double we will take our balance equals we're assigning it take our current balance minus call the withdraw method but we have to pass in our balance our original balance from our current balance we're subtracting the amount that we're withdrawing we can simplify this expression to we could say balance minus equals then call the withdraw method all right let's do a test run first we'll make a deposit I will deposit $100 to keep the simple I will show our balance we have $100 I will try and withdraw like a kajillion dollars insufficient funds we don't have a kajillion dollars let's withdraw again I will try and withdraw negative money -42 $69 amount can't be negative we can't withdraw negative money okay let's try and withdraw something that's valid $501 that seems to have worked let's show our balance our balance is now $449.99 the last step is to exit and display a goodbye message let's print the following thank you have a nice day just so the user knows that they have exited the program and for fun I'm going to add some text decoration some separators not necessary but I think it'll look nice all right let's run this one last time banking program enter your choice I will show our balance we have $0 I will make a deposit I will deposit $11,000 show our balance we have $1,000 I will withdraw let's withdraw a single penny 0.01 show our balance we now have $999.99 I will press for to exit and we exit thank you have a nice day all right everybody that is a Java banking program that you can write as a beginner